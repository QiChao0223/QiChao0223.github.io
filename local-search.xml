<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>code习惯记录</title>
    <link href="/2023/12/09/code%E4%B9%A0%E6%83%AF%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/12/09/code%E4%B9%A0%E6%83%AF%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>一些写c/cpp的习惯记录</p><span id="more"></span><h3 id="头文件顺序">头文件顺序</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>源文件对应的头文件<br><span class="hljs-bullet">- </span>C标准库<br><span class="hljs-bullet">- </span>C++标准库<br><span class="hljs-bullet">- </span>其它库的头文件<br><span class="hljs-bullet">- </span>本工程的头文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mpc</title>
    <link href="/2023/12/08/mpc/"/>
    <url>/2023/12/08/mpc/</url>
    
    <content type="html"><![CDATA[<p>一些关于MPC基础知识的记录</p><span id="more"></span><h2 id="安全多方计算"><strong>安全多方计算</strong></h2><p><strong>Secure Multi-PartyComputation</strong>，简称是<strong>MPC</strong>或者是<strong>SMPC</strong>。MPC起源于姚期智先生提出的百万富翁问题：两个富翁希望在不泄露实际资产的前提下完成资产的比较。多方计算的目标就是对一组计算的参与者，每个参与者拥有自己的数据，并且不信任其它参与者和任何第三方，在这种前提下，如何对各自私密的数据计算出一个目标结果的过程。</p><p><span class="math inline">\(n\)</span> 个参与方<spanclass="math inline">\(P_1, P_2, \cdots,P_n\)</span>，每个参与方拥有输入<spanclass="math inline">\(x_i\)</span>，参与方想要安全计算出一个函数 <spanclass="math inline">\(f(x_1, x_2 ,\cdots,x_n)\)</span>，在这个计算过程中，参与方的输入<spanclass="math inline">\(x_1, x_2, \cdots,x_n\)</span>不会泄露，只有最终的计算结果 <span class="math inline">\(z =f(x_1, x_2 ,\cdots, x_n)\)</span> 会被参与方知晓。MPC protocal就是参与方需要遵照执行的一系列规则，其中会涉及到本地计算和信息交互。</p><h3 id="corruption-threshold">Corruption threshold</h3><ul><li><strong>Honest majority</strong>，诚实大多数，$t &lt;$。在这种模型下，敌手最多能腐化 $t &lt; $个参与方。不论被腐化参与方有谁，诚实的参与方仍然占据大多数。</li><li><strong>Two-thirds honest majority</strong>，$t &lt; <spanclass="math inline">\(。在这种模型下，敌手只能腐化更少的的参与方，腐化数量最多为\)</span>t&lt; $。城市参与方的数量至少是腐化参与方的两倍。</li><li><strong>Dishonest majority</strong>，不诚实大多数模型 $t &lt; {n}<spanclass="math inline">\(，在这种模型下，敌手最多能腐化\)</span>n-1$个参与方。</li></ul><h3 id="混淆电路">混淆电路</h3><p>==实际上所有可计算问题都可以转换成各种不同的电路来完成，例如加法电路、比较电路、乘法电路等。==</p><h4 id="定义">定义</h4><p><strong>GarbledCircuits</strong>，GC是姚期智教授在80年代提出的安全计算概念，通过<strong>布尔电路</strong>构造安全函数计算。GC里的多方的共同计算就是通过电路的方式来实现。遵照这个协议，两方能在互相不知晓对方数据的情况下计算某一能被逻辑电路表示的函数。比如有两个富翁想知道谁的财富更多，但他们又较保守不想让对方知道自己的财富值。这时他们可以事先商定好的一个比大小的逻辑电路，并在逻辑电路上执行GC协议来获得结果。</p><h4 id="电路">电路</h4><figure><imgsrc="https://typora-1306204209.cos.ap-nanjing.myqcloud.com/typora/image-20231209124750339.png"alt="image-20231209124750339" /><figcaption aria-hidden="true">image-20231209124750339</figcaption></figure><p>上面是是一些基础电路，包括与门、非门、或门</p><h4 id="gc方案">GC方案</h4><h3 id="秘密共享"><strong>秘密共享</strong></h3><h4 id="定义-1">定义</h4><p><strong>Secret Sharing</strong></p><h4 id="秘密共享方案">秘密共享方案</h4><h3 id="不经意传输">不经意传输</h3>]]></content>
    
    
    
    <tags>
      
      <tag>MPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An Introduction to Secret-Sharing-Based Secure Multiparty Computation</title>
    <link href="/2023/11/18/An%20Introduction%20to%20Secret-Sharing-Based/"/>
    <url>/2023/11/18/An%20Introduction%20to%20Secret-Sharing-Based/</url>
    
    <content type="html"><![CDATA[<p><!-- 在线显示PDF --><!-- 第一种方式，可调整pdf显示的大小，比较灵活 --></p><embed src="./SecretSharing.pdf" width="100%" height="1000" type="application/pdf">]]></content>
    
    
    
    <tags>
      
      <tag>MPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
